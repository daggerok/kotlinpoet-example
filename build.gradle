buildscript {
  ext {
    javaVersion = "1.8"
    kotlinVersion = "1.2.41"
  }
}

plugins {
  id "idea"
  id "java"
  id "eclipse"
  id "application"
  id "maven-publish"
  id "org.jetbrains.kotlin.jvm" version "1.2.41"
  id "org.jetbrains.kotlin.plugin.noarg" version "1.2.41"
  id "org.jetbrains.kotlin.plugin.allopen" version "1.2.41"
  id "com.avast.gradle.docker-compose" version "0.6.13"
  id "com.github.johnrengelman.shadow" version "2.0.2"
}

compileKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

compileTestKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

group = "daggerok"
version = "0.0.1"
sourceCompatibility = targetCompatibility = "$javaVersion"

mainClassName = "daggerok.AppKt"
shadowJar.mustRunAfter jar

defaultTasks "clean", "build", "installDist", "distZip", "publish"

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  compile("com.squareup:kotlinpoet:0.7.0")
  compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
}

def profile = project.hasProperty("profile") ? project.getProperty("profile") : "gradle"

dockerCompose {
  useComposeFiles = [project.file("docker-compose-${profile}.yaml")]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = "Local"
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

composeUp.dependsOn assemble

publishing {
  publications {
    shadow(MavenPublication) { publication ->
      project.shadow.component(publication)
    }
  }
  repositories {
    maven {
      url "$buildDir/maven-publish"
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "4.7"
  distributionType = "ALL"
}

idea {
  module {
    downloadSources = true
  }
}

eclipse {
  classpath {
    downloadSources = true
  }
}
